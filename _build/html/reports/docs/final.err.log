Traceback (most recent call last):
  File "/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/local/Caskroom/miniconda/base/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import dash
from dash import dcc
from dash import html

df1 = pd.read_csv('happiness_2020.csv')
df2 = pd.read_csv('happiness_2022.csv')

# Initialize the Dash app
app = dash.Dash(__name__)


app.layout = html.Div([
    dcc.Dropdown(
        id='dataset-dropdown',
        options=[
            {'label': 'Happiness 2020', 'value': 'df1'},
            {'label': 'Happiness 2022', 'value': 'df2'}
        ],
        value='df1',
    ),
    html.H2(id='chart-title'),
    dcc.Graph(id='pie-chart')
])


@app.callback(
    [dash.dependencies.Output('pie-chart', 'figure'),
     dash.dependencies.Output('chart-title', 'children')],
    [dash.dependencies.Input('dataset-dropdown', 'value')]
)
    
    
def update_pie_chart(dataset):
    
    if dataset == 'df1':
        df = df1
        dataset_name = 'Happiness 2020'
    else:
        df = df2
        dataset_name = 'Happiness 2022'
    
    
    mean_values = df.iloc[:, -7:].mean(axis=0)
    labels = mean_values.index
    values = mean_values.values
    
    
    fig = px.pie(values=values, names=labels, hole=0.5)
    
    
    title = f"Distribution of each happiness factor - {dataset_name}"
    
    return fig, title

# Run the app
if __name__ == '__main__':
    app.run_server(port=8051, debug=True)
------------------

----- stderr -----
Address already in use
Port 8051 is in use by another program. Either identify and stop that program, or start the server with a different port.
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mOSError[0m                                   Traceback (most recent call last)
File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/werkzeug/serving.py:710[0m, in [0;36mBaseWSGIServer.__init__[0;34m(self, host, port, app, handler, passthrough_errors, ssl_context, fd)[0m
[1;32m    709[0m [38;5;28;01mtry[39;00m:
[0;32m--> 710[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mserver_bind[49m[43m([49m[43m)[49m
[1;32m    711[0m     [38;5;28mself[39m[38;5;241m.[39mserver_activate()

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/http/server.py:136[0m, in [0;36mHTTPServer.server_bind[0;34m(self)[0m
[1;32m    135[0m [38;5;250m[39m[38;5;124;03m"""Override server_bind to store the server name."""[39;00m
[0;32m--> 136[0m [43msocketserver[49m[38;5;241;43m.[39;49m[43mTCPServer[49m[38;5;241;43m.[39;49m[43mserver_bind[49m[43m([49m[38;5;28;43mself[39;49m[43m)[49m
[1;32m    137[0m host, port [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mserver_address[:[38;5;241m2[39m]

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/socketserver.py:466[0m, in [0;36mTCPServer.server_bind[0;34m(self)[0m
[1;32m    465[0m     [38;5;28mself[39m[38;5;241m.[39msocket[38;5;241m.[39msetsockopt(socket[38;5;241m.[39mSOL_SOCKET, socket[38;5;241m.[39mSO_REUSEADDR, [38;5;241m1[39m)
[0;32m--> 466[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43msocket[49m[38;5;241;43m.[39;49m[43mbind[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mserver_address[49m[43m)[49m
[1;32m    467[0m [38;5;28mself[39m[38;5;241m.[39mserver_address [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39msocket[38;5;241m.[39mgetsockname()

[0;31mOSError[0m: [Errno 48] Address already in use

During handling of the above exception, another exception occurred:

[0;31mSystemExit[0m                                Traceback (most recent call last)
    [0;31m[... skipping hidden 1 frame][0m

Cell [0;32mIn[9], line 57[0m
[1;32m     56[0m [38;5;28;01mif[39;00m [38;5;18m__name__[39m [38;5;241m==[39m [38;5;124m'[39m[38;5;124m__main__[39m[38;5;124m'[39m:
[0;32m---> 57[0m     [43mapp[49m[38;5;241;43m.[39;49m[43mrun_server[49m[43m([49m[43mport[49m[38;5;241;43m=[39;49m[38;5;241;43m8051[39;49m[43m,[49m[43m [49m[43mdebug[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/dash/dash.py:2091[0m, in [0;36mDash.run_server[0;34m(self, *args, **kwargs)[0m
[1;32m   2086[0m [38;5;250m[39m[38;5;124;03m"""`run_server` is a deprecated alias of `run` and may be removed in a[39;00m
[1;32m   2087[0m [38;5;124;03mfuture version. We recommend using `app.run` instead.[39;00m
[1;32m   2088[0m 
[1;32m   2089[0m [38;5;124;03mSee `app.run` for usage information.[39;00m
[1;32m   2090[0m [38;5;124;03m"""[39;00m
[0;32m-> 2091[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mrun[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/dash/dash.py:1989[0m, in [0;36mDash.run[0;34m(self, host, port, proxy, debug, jupyter_mode, jupyter_width, jupyter_height, jupyter_server_url, dev_tools_ui, dev_tools_props_check, dev_tools_serve_dev_bundles, dev_tools_hot_reload, dev_tools_hot_reload_interval, dev_tools_hot_reload_watch_interval, dev_tools_hot_reload_max_retry, dev_tools_silence_routes_logging, dev_tools_prune_errors, **flask_run_options)[0m
[1;32m   1988[0m [38;5;28;01mif[39;00m jupyter_dash[38;5;241m.[39mactive:
[0;32m-> 1989[0m     [43mjupyter_dash[49m[38;5;241;43m.[39;49m[43mrun_app[49m[43m([49m
[1;32m   1990[0m [43m        [49m[38;5;28;43mself[39;49m[43m,[49m
[1;32m   1991[0m [43m        [49m[43mmode[49m[38;5;241;43m=[39;49m[43mjupyter_mode[49m[43m,[49m
[1;32m   1992[0m [43m        [49m[43mwidth[49m[38;5;241;43m=[39;49m[43mjupyter_width[49m[43m,[49m
[1;32m   1993[0m [43m        [49m[43mheight[49m[38;5;241;43m=[39;49m[43mjupyter_height[49m[43m,[49m
[1;32m   1994[0m [43m        [49m[43mhost[49m[38;5;241;43m=[39;49m[43mhost[49m[43m,[49m
[1;32m   1995[0m [43m        [49m[43mport[49m[38;5;241;43m=[39;49m[43mport[49m[43m,[49m
[1;32m   1996[0m [43m        [49m[43mserver_url[49m[38;5;241;43m=[39;49m[43mjupyter_server_url[49m[43m,[49m
[1;32m   1997[0m [43m    [49m[43m)[49m
[1;32m   1998[0m [38;5;28;01melse[39;00m:

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/dash/_jupyter.py:329[0m, in [0;36mJupyterDash.run_app[0;34m(self, app, mode, width, height, host, port, server_url)[0m
[1;32m    327[0m err_q [38;5;241m=[39m queue[38;5;241m.[39mQueue()
[0;32m--> 329[0m server [38;5;241m=[39m [43mmake_server[49m[43m([49m[43mhost[49m[43m,[49m[43m [49m[43mport[49m[43m,[49m[43m [49m[43mapp[49m[38;5;241;43m.[39;49m[43mserver[49m[43m,[49m[43m [49m[43mthreaded[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43mprocesses[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m)[49m
[1;32m    330[0m logging[38;5;241m.[39mgetLogger([38;5;124m"[39m[38;5;124mwerkzeug[39m[38;5;124m"[39m)[38;5;241m.[39msetLevel(logging[38;5;241m.[39mERROR)

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/werkzeug/serving.py:877[0m, in [0;36mmake_server[0;34m(host, port, app, threaded, processes, request_handler, passthrough_errors, ssl_context, fd)[0m
[1;32m    876[0m [38;5;28;01mif[39;00m threaded:
[0;32m--> 877[0m     [38;5;28;01mreturn[39;00m [43mThreadedWSGIServer[49m[43m([49m
[1;32m    878[0m [43m        [49m[43mhost[49m[43m,[49m[43m [49m[43mport[49m[43m,[49m[43m [49m[43mapp[49m[43m,[49m[43m [49m[43mrequest_handler[49m[43m,[49m[43m [49m[43mpassthrough_errors[49m[43m,[49m[43m [49m[43mssl_context[49m[43m,[49m[43m [49m[43mfd[49m[38;5;241;43m=[39;49m[43mfd[49m
[1;32m    879[0m [43m    [49m[43m)[49m
[1;32m    881[0m [38;5;28;01mif[39;00m processes [38;5;241m>[39m [38;5;241m1[39m:

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/werkzeug/serving.py:733[0m, in [0;36mBaseWSGIServer.__init__[0;34m(self, host, port, app, handler, passthrough_errors, ssl_context, fd)[0m
[1;32m    727[0m             [38;5;28mprint[39m(
[1;32m    728[0m                 [38;5;124m"[39m[38;5;124mOn macOS, try disabling the [39m[38;5;124m'[39m[38;5;124mAirPlay Receiver[39m[38;5;124m'[39m[38;5;124m service[39m[38;5;124m"[39m
[1;32m    729[0m                 [38;5;124m"[39m[38;5;124m from System Preferences -> Sharing.[39m[38;5;124m"[39m,
[1;32m    730[0m                 file[38;5;241m=[39msys[38;5;241m.[39mstderr,
[1;32m    731[0m             )
[0;32m--> 733[0m     [43msys[49m[38;5;241;43m.[39;49m[43mexit[49m[43m([49m[38;5;241;43m1[39;49m[43m)[49m
[1;32m    734[0m [38;5;28;01mexcept[39;00m [38;5;167;01mBaseException[39;00m:

[0;31mSystemExit[0m: 1

During handling of the above exception, another exception occurred:

[0;31mAttributeError[0m                            Traceback (most recent call last)
    [0;31m[... skipping hidden 1 frame][0m

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/IPython/core/interactiveshell.py:2095[0m, in [0;36mInteractiveShell.showtraceback[0;34m(self, exc_tuple, filename, tb_offset, exception_only, running_compiled_code)[0m
[1;32m   2092[0m [38;5;28;01mif[39;00m exception_only:
[1;32m   2093[0m     stb [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mAn exception has occurred, use [39m[38;5;124m%[39m[38;5;124mtb to see [39m[38;5;124m'[39m
[1;32m   2094[0m            [38;5;124m'[39m[38;5;124mthe full traceback.[39m[38;5;130;01m\n[39;00m[38;5;124m'[39m]
[0;32m-> 2095[0m     stb[38;5;241m.[39mextend([38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mInteractiveTB[49m[38;5;241;43m.[39;49m[43mget_exception_only[49m[43m([49m[43metype[49m[43m,[49m
[1;32m   2096[0m [43m                                                     [49m[43mvalue[49m[43m)[49m)
[1;32m   2097[0m [38;5;28;01melse[39;00m:
[1;32m   2098[0m     [38;5;28;01mtry[39;00m:
[1;32m   2099[0m         [38;5;66;03m# Exception classes can customise their traceback - we[39;00m
[1;32m   2100[0m         [38;5;66;03m# use this in IPython.parallel for exceptions occurring[39;00m
[1;32m   2101[0m         [38;5;66;03m# in the engines. This should return a list of strings.[39;00m

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/IPython/core/ultratb.py:710[0m, in [0;36mListTB.get_exception_only[0;34m(self, etype, value)[0m
[1;32m    702[0m [38;5;28;01mdef[39;00m [38;5;21mget_exception_only[39m([38;5;28mself[39m, etype, value):
[1;32m    703[0m [38;5;250m    [39m[38;5;124;03m"""Only print the exception type and message, without a traceback.[39;00m
[1;32m    704[0m 
[1;32m    705[0m [38;5;124;03m    Parameters[39;00m
[0;32m   (...)[0m
[1;32m    708[0m [38;5;124;03m    value : exception value[39;00m
[1;32m    709[0m [38;5;124;03m    """[39;00m
[0;32m--> 710[0m     [38;5;28;01mreturn[39;00m [43mListTB[49m[38;5;241;43m.[39;49m[43mstructured_traceback[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43metype[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/IPython/core/ultratb.py:568[0m, in [0;36mListTB.structured_traceback[0;34m(self, etype, evalue, etb, tb_offset, context)[0m
[1;32m    565[0m     chained_exc_ids[38;5;241m.[39madd([38;5;28mid[39m(exception[[38;5;241m1[39m]))
[1;32m    566[0m     chained_exceptions_tb_offset [38;5;241m=[39m [38;5;241m0[39m
[1;32m    567[0m     out_list [38;5;241m=[39m (
[0;32m--> 568[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mstructured_traceback[49m[43m([49m
[1;32m    569[0m [43m            [49m[43metype[49m[43m,[49m
[1;32m    570[0m [43m            [49m[43mevalue[49m[43m,[49m
[1;32m    571[0m [43m            [49m[43m([49m[43metb[49m[43m,[49m[43m [49m[43mchained_exc_ids[49m[43m)[49m[43m,[49m[43m  [49m[38;5;66;43;03m# type: ignore[39;49;00m
[1;32m    572[0m [43m            [49m[43mchained_exceptions_tb_offset[49m[43m,[49m
[1;32m    573[0m [43m            [49m[43mcontext[49m[43m,[49m
[1;32m    574[0m [43m        [49m[43m)[49m
[1;32m    575[0m         [38;5;241m+[39m chained_exception_message
[1;32m    576[0m         [38;5;241m+[39m out_list)
[1;32m    578[0m [38;5;28;01mreturn[39;00m out_list

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/IPython/core/ultratb.py:1428[0m, in [0;36mAutoFormattedTB.structured_traceback[0;34m(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)[0m
[1;32m   1426[0m [38;5;28;01melse[39;00m:
[1;32m   1427[0m     [38;5;28mself[39m[38;5;241m.[39mtb [38;5;241m=[39m etb
[0;32m-> 1428[0m [38;5;28;01mreturn[39;00m [43mFormattedTB[49m[38;5;241;43m.[39;49m[43mstructured_traceback[49m[43m([49m
[1;32m   1429[0m [43m    [49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43metype[49m[43m,[49m[43m [49m[43mevalue[49m[43m,[49m[43m [49m[43metb[49m[43m,[49m[43m [49m[43mtb_offset[49m[43m,[49m[43m [49m[43mnumber_of_lines_of_context[49m
[1;32m   1430[0m [43m[49m[43m)[49m

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/IPython/core/ultratb.py:1319[0m, in [0;36mFormattedTB.structured_traceback[0;34m(self, etype, value, tb, tb_offset, number_of_lines_of_context)[0m
[1;32m   1316[0m mode [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mmode
[1;32m   1317[0m [38;5;28;01mif[39;00m mode [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mverbose_modes:
[1;32m   1318[0m     [38;5;66;03m# Verbose modes need a full traceback[39;00m
[0;32m-> 1319[0m     [38;5;28;01mreturn[39;00m [43mVerboseTB[49m[38;5;241;43m.[39;49m[43mstructured_traceback[49m[43m([49m
[1;32m   1320[0m [43m        [49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43metype[49m[43m,[49m[43m [49m[43mvalue[49m[43m,[49m[43m [49m[43mtb[49m[43m,[49m[43m [49m[43mtb_offset[49m[43m,[49m[43m [49m[43mnumber_of_lines_of_context[49m
[1;32m   1321[0m [43m    [49m[43m)[49m
[1;32m   1322[0m [38;5;28;01melif[39;00m mode [38;5;241m==[39m [38;5;124m'[39m[38;5;124mMinimal[39m[38;5;124m'[39m:
[1;32m   1323[0m     [38;5;28;01mreturn[39;00m ListTB[38;5;241m.[39mget_exception_only([38;5;28mself[39m, etype, value)

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/IPython/core/ultratb.py:1172[0m, in [0;36mVerboseTB.structured_traceback[0;34m(self, etype, evalue, etb, tb_offset, number_of_lines_of_context)[0m
[1;32m   1163[0m [38;5;28;01mdef[39;00m [38;5;21mstructured_traceback[39m(
[1;32m   1164[0m     [38;5;28mself[39m,
[1;32m   1165[0m     etype: [38;5;28mtype[39m,
[0;32m   (...)[0m
[1;32m   1169[0m     number_of_lines_of_context: [38;5;28mint[39m [38;5;241m=[39m [38;5;241m5[39m,
[1;32m   1170[0m ):
[1;32m   1171[0m [38;5;250m    [39m[38;5;124;03m"""Return a nice text document describing the traceback."""[39;00m
[0;32m-> 1172[0m     formatted_exception [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mformat_exception_as_a_whole[49m[43m([49m[43metype[49m[43m,[49m[43m [49m[43mevalue[49m[43m,[49m[43m [49m[43metb[49m[43m,[49m[43m [49m[43mnumber_of_lines_of_context[49m[43m,[49m
[1;32m   1173[0m [43m                                                           [49m[43mtb_offset[49m[43m)[49m
[1;32m   1175[0m     colors [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mColors  [38;5;66;03m# just a shorthand + quicker name lookup[39;00m
[1;32m   1176[0m     colorsnormal [38;5;241m=[39m colors[38;5;241m.[39mNormal  [38;5;66;03m# used a lot[39;00m

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/IPython/core/ultratb.py:1062[0m, in [0;36mVerboseTB.format_exception_as_a_whole[0;34m(self, etype, evalue, etb, number_of_lines_of_context, tb_offset)[0m
[1;32m   1059[0m [38;5;28;01massert[39;00m [38;5;28misinstance[39m(tb_offset, [38;5;28mint[39m)
[1;32m   1060[0m head [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mprepare_header([38;5;28mstr[39m(etype), [38;5;28mself[39m[38;5;241m.[39mlong_header)
[1;32m   1061[0m records [38;5;241m=[39m (
[0;32m-> 1062[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mget_records[49m[43m([49m[43metb[49m[43m,[49m[43m [49m[43mnumber_of_lines_of_context[49m[43m,[49m[43m [49m[43mtb_offset[49m[43m)[49m [38;5;28;01mif[39;00m etb [38;5;28;01melse[39;00m []
[1;32m   1063[0m )
[1;32m   1065[0m frames [38;5;241m=[39m []
[1;32m   1066[0m skipped [38;5;241m=[39m [38;5;241m0[39m

File [0;32m/usr/local/Caskroom/miniconda/base/lib/python3.10/site-packages/IPython/core/ultratb.py:1130[0m, in [0;36mVerboseTB.get_records[0;34m(self, etb, number_of_lines_of_context, tb_offset)[0m
[1;32m   1128[0m [38;5;28;01mwhile[39;00m cf [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m   1129[0m     [38;5;28;01mtry[39;00m:
[0;32m-> 1130[0m         mod [38;5;241m=[39m inspect[38;5;241m.[39mgetmodule([43mcf[49m[38;5;241;43m.[39;49m[43mtb_frame[49m)
[1;32m   1131[0m         [38;5;28;01mif[39;00m mod [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m   1132[0m             mod_name [38;5;241m=[39m mod[38;5;241m.[39m[38;5;18m__name__[39m

[0;31mAttributeError[0m: 'tuple' object has no attribute 'tb_frame'

